getchar(charname){
  return this.toon[charname];
}

class rpg {
  constructor() {
    toon: {};
  }
  makeChar(name) {
    this._toon[name] = new Char(name)
  }
}

class Char {
  constructor(name, armor) {
    this._name = name;
    this.health = 400;
  }
}

Whiteboard: 

Actor
 - stats (for combat and role play)
    * name
    * health
    * strength
    * defense

  Character
  - stats (for combat and role play)
      * name
      * health
      * strength
      * defense
  - equipment
  - inventory

  Enemies
  - stats (for combat only)
      * name
      * health
      * strength
      * defense

Combat
 - turn based or otherwise
      * determine course of action
      * select specific action to take within said course
      * determine the outcome of said action
      * display/communicate outcome to player
      * repeat until character or enemy health = 0
 - 
 - accuracy and damage calculation
 - determine a victor

Theme
 - Fantasy
                          _
                          _)\.-.
         .-.__,___,_.-=-. )\`  0`\_
     .-.__\__,__,__.-=-. `/  \     `\
     {~,-~-,-~.-~,-,;;;;\ |   '--;`)/
      \-,~_-~_-,~-,(_(_(;\/   ,;/
       ",-.~_,-~,-~,)_)_)'.  ;;(
         `~-,_-~,-~(_(_(_(_\  `;\
   ,          `"~~--,)_)_)_)\_   \
   |\              (_(_/_(_,   \  ;
   \ '-.       _.--'  /_/_/_)   | |
    '--.\    .'          /_/    | |
        ))  /       \      |   /.'
       //  /,        | __.'|  ||
      //   ||        /`    (  ||
     ||    ||      .'       \ \\
     ||    ||    .'_         \ \\
      \\   //   / _ `\        \ \\__
       \'-'/(   _  `\,;        \ '--:,
        `"`  `"` `-,,;         `"`",,;
///////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
////////////////////////////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\
                                                                                                      //////////////////
switch case can use plain english to describe situations, Higher values being better or worse        //////////////////
  ascendance level                                                                                  //////////////////
  const netGain = (a,b) => `Your ascendance ${(a + b) > 5 ? 'gains' : 'losses'} ${a + b}`          //////////////////
exg .1                                                                                            //////////////////
    * switchFuncVariationOne = (firstRoll) =>                                                    //////////////////
        5: () => 'Your fate has greatly'                                                        //////////////////
    * switchFuncVariationTwo = (secondRoll) =>                                                 //////////////////
        2: (firstRoll) => [firstRoll, 'seen a settlement in its state.']                      //////////////////
    let concat = `${[switchFuncVariationTwo()].toString()} netGain(firstRoll, secondRoll)`   //////////////////
    * rpg.setAscendance('Bob', rollValue);                                                  //////////////\\\\\
// turn values should be held in the object.                                               ////////////////\\\\\
////////////////////////////////////////////////////////////////////////////////////////////////////////////\\\\\ 




Combat
 - turn based or otherwise
      * determine course of action
      * select specific action to take within said course
      * determine the outcome of said action
      * display/communicate outcome to player
      * repeat until character or enemy health = 0
 - 
 - accuracy and damage calculation
 - determine a victor


Class combat(actor1, actor2)
{
  "Fight between x and y!"
  while(actor1.health>0 && actor2.health>0)
  {
    reads who's turn it is => current actor
    currentactor chooses an action (need set of action options (fight, item, defend, run))
    if (fight)
      calculate damage 
      idleactor takes damage
    if (item)
      ......
    if (defend)
      temporarily increase defense
    if (run)
      break fight (break loop or class (?) or function)
    

}